name: Deploy Main Website

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'sesv2-admin/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'sesv2-admin/**'
      
  # Allow manual triggering
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::767072126027:role/github-actions-oidc
          aws-region: us-east-1
          role-session-name: github-actions
      
      # Step 1: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7
          
      # Step 2: Apply Main Website Infrastructure
      - name: Terraform Init and Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./terraform
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve
      
      # Step 3: Build the site
      - name: Build site
        run: |
          npm run build
      
      # Step 4: Deploy to S3
      - name: Get S3 bucket name from Terraform outputs
        id: tf-outputs
        working-directory: ./terraform
        run: |
          BUCKET_NAME=$(terraform output -raw website_bucket_name)
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          
          DISTRIBUTION_ID=$(terraform output -raw main_cloudfront_distribution_id)
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
      
      - name: Deploy to S3
        if: github.ref == 'refs/heads/main'
        run: |
          aws s3 sync public/ s3://${{ steps.tf-outputs.outputs.bucket_name }}/ --delete
          echo "Verifying deployment:"
          aws s3 ls s3://${{ steps.tf-outputs.outputs.bucket_name }}/ --recursive | head -5
      
      # Step 5: Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        if: github.ref == 'refs/heads/main'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.tf-outputs.outputs.distribution_id }} --paths "/*"
      
      # Step 6: Verify deployment
      - name: Verify deployment
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Waiting 30 seconds for invalidation to start propagating..."
          sleep 30
          
          # Test the deployed site
          echo "Testing main website..."
          curl -s -I https://waterwaycleanups.org/ | grep -E "HTTP|X-Cache|Content-Type"
          
      - name: Slack Notification
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Main Website deploy result*: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Main Website deploy result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
