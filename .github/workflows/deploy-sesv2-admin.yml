name: Deploy SESv2 Admin App

on:
  push:
    branches:
      - main
    paths:
      - 'sesv2-admin/**'
      - '.github/workflows/deploy-sesv2-admin.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'sesv2-admin/**'
      - '.github/workflows/deploy-sesv2-admin.yml'
      
  # Allow manual triggering
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: sesv2-admin/package-lock.json
      
      - name: Install dependencies
        working-directory: ./sesv2-admin
        run: |
          npm ci
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::767072126027:role/github-actions-oidc
          aws-region: us-east-1
          role-session-name: github-actions
      
      # Step 1: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7
          
      # Step 2: Apply SESv2 Admin App Terraform (from its own folder)
      - name: Terraform Init and Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./sesv2-admin/terraform
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve
      
      # Continue with the SESv2 admin app deployment
      - name: Retrieve parameters from SSM
        working-directory: ./sesv2-admin
        run: |
          ./get-params-from-ssm.sh prod
          # Display parameter names (but not values for security)
          grep -v "^#" .env | cut -d= -f1 || true

      # Export environment variables for subsequent steps
      - name: Export environment variables
        working-directory: ./sesv2-admin
        run: |
          # Create a list of export commands for GitHub Actions to use in subsequent steps
          grep -v '^#' .env | sed 's/^/echo "/' | sed 's/$/\" >> $GITHUB_ENV/' | sh
          
      - name: Verify environment variables
        working-directory: ./sesv2-admin
        run: |
          # Run the verification script to ensure all required variables are available
          node verify-build-env.js

      - name: Build application
        working-directory: ./sesv2-admin
        run: |
          # Use the custom CI build script which will automatically load .env variables
          npm run build:ci
        env:
          CI: false # Prevents treating warnings as errors
          PUBLIC_URL: https://sesv2-admin.waterwaycleanups.org # Set the correct public URL
      
      # Deploy to S3 bucket (dynamically get the bucket name from Terraform outputs)
      - name: Get S3 bucket name from Terraform outputs
        id: tf-outputs
        working-directory: ./sesv2-admin/terraform
        run: |
          echo "bucket_name=$(terraform output -raw sesv2_admin_bucket_name)" >> $GITHUB_OUTPUT         
          echo "distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
      
      - name: Deploy to S3
        if: github.ref == 'refs/heads/main'
        working-directory: ./sesv2-admin
        run: |
          aws s3 sync build/ s3://${{ steps.tf-outputs.outputs.bucket_name }}/ --delete
          echo "Verifying deployment:"
          aws s3 ls s3://${{ steps.tf-outputs.outputs.bucket_name }}/ --recursive | head -5
      
      - name: Invalidate CloudFront cache
        if: github.ref == 'refs/heads/main'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.tf-outputs.outputs.distribution_id }} --paths "/*"
      
      - name: Verify deployment
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Waiting 30 seconds for invalidation to start propagating..."
          sleep 30
          
          # Test the deployed site
          echo "Testing SESv2 admin site..."
          curl -s -I https://sesv2-admin.waterwaycleanups.org/ | grep -E "HTTP|X-Cache|Content-Type"
          
      - name: Slack Notification
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*SESv2 Admin deploy result*: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "SESv2 Admin deploy result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
