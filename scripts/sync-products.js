#!/usr/bin/env node

require('dotenv').config();
const Stripe = require('stripe');
const fs = require('fs');
const path = require('path');

const PRODUCTS_FILE_PATH = path.join(__dirname, '..', 'merch-page', 'data', 'products.ts');

class ProductSyncer {
  constructor(options = {}) {
    this.dryRun = options.dryRun || false;
    this.preserveLocal = options.preserveLocal !== false;
    this.verbose = options.verbose || false;
  }

  log(message, force = false) {
    if (this.verbose || force) {
      console.log(message);
    }
  }

  async fetchStripeProducts() {
    this.log('Fetching products from Stripe...');
    
    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
    
    try {
      const products = await stripe.products.list({ 
        active: true,
        expand: ['data.default_price'],
        limit: 100
      });

      const productData = [];
      
      for (const product of products.data) {
        if (!product.default_price) {
          this.log(`Warning: Product ${product.name} has no default price, skipping...`);
          continue;
        }

        const price = product.default_price;
        const productInfo = {
          id: product.id,
          name: product.name,
          description: product.description || '',
          price: price.unit_amount / 100,
          currency: price.currency.toUpperCase(),
          stripePriceId: price.id,
          images: product.images || [],
          metadata: product.metadata || {}
        };

        productData.push(productInfo);
      }

      this.log(`Found ${productData.length} active products in Stripe`);
      return productData;
    } catch (error) {
      console.error('Error fetching Stripe products:', error.message);
      process.exit(1);
    }
  }

  async readLocalProducts() {
    this.log('Reading local products configuration...');
    
    try {
      if (!fs.existsSync(PRODUCTS_FILE_PATH)) {
        this.log('Local products file does not exist, will create new one');
        return [];
      }

      const content = fs.readFileSync(PRODUCTS_FILE_PATH, 'utf8');
      
      // Extract the products array from the TypeScript file
      const match = content.match(/export const products: Product\[\] = (\[[\s\S]*?\]);/);
      if (!match) {
        this.log('Warning: Could not parse existing products file format');
        return [];
      }

      // Simple parsing - convert to JSON-like format
      let productsStr = match[1]
        .replace(/'/g, '"')
        .replace(/(\w+):/g, '"$1":')
        .replace(/,(\s*[}\]])/g, '$1');

      try {
        const localProducts = JSON.parse(productsStr);
        this.log(`Found ${localProducts.length} local products`);
        return localProducts;
      } catch (parseError) {
        this.log('Warning: Could not parse existing products, treating as empty');
        return [];
      }
    } catch (error) {
      this.log(`Warning: Could not read local products file: ${error.message}`);
      return [];
    }
  }

  mergeProducts(stripeProducts, localProducts) {
    this.log('Merging Stripe and local product data...');
    
    const localProductsMap = new Map();
    localProducts.forEach(product => {
      localProductsMap.set(product.stripePriceId || product.id, product);
    });

    const mergedProducts = stripeProducts.map(stripeProduct => {
      const localProduct = localProductsMap.get(stripeProduct.stripePriceId) || 
                          localProductsMap.get(stripeProduct.id);

      const merged = {
        id: localProduct?.id || stripeProduct.id,
        name: stripeProduct.name,
        price: stripeProduct.price,
        currency: stripeProduct.currency,
        stripePriceId: stripeProduct.stripePriceId,
        description: this.preserveLocal && localProduct?.description ? 
                    localProduct.description : stripeProduct.description,
        images: this.preserveLocal && localProduct?.images?.length ? 
               localProduct.images : stripeProduct.images
      };

      return merged;
    });

    this.log(`Merged ${mergedProducts.length} products`);
    return mergedProducts;
  }

  generateProductsFileContent(products) {
    const productsJson = JSON.stringify(products, null, 2)
      .replace(/"([^"]+)":/g, '$1:')
      .replace(/"/g, "'");

    return `
import type { Product } from '../types';

// This file was generated by scripts/sync-products.js
// Last updated: ${new Date().toISOString()}
export const products: Product[] = ${productsJson};
`;
  }


  async writeProductsFile(content) {
    if (this.dryRun) {
      console.log('DRY RUN - Would write the following content:');
      console.log(content);
      return;
    }

    fs.writeFileSync(PRODUCTS_FILE_PATH, content);
    this.log(`Updated products file: ${PRODUCTS_FILE_PATH}`, true);
  }

  async sync() {
    console.log('üîÑ Starting product sync...\n');

    if (!process.env.STRIPE_SECRET_KEY) {
      console.error('‚ùå STRIPE_SECRET_KEY environment variable is required');
      console.log('Create a .env file with: STRIPE_SECRET_KEY=sk_test_...');
      process.exit(1);
    }

    if (!process.env.STRIPE_SECRET_KEY.startsWith('sk_')) {
      console.error('‚ùå Invalid Stripe secret key format');
      process.exit(1);
    }

    try {
      const [stripeProducts, localProducts] = await Promise.all([
        this.fetchStripeProducts(),
        this.readLocalProducts()
      ]);

      if (stripeProducts.length === 0) {
        console.log('‚ö†Ô∏è  No active products found in Stripe');
        return;
      }

      const mergedProducts = this.mergeProducts(stripeProducts, localProducts);
      const fileContent = this.generateProductsFileContent(mergedProducts);
      
      await this.writeProductsFile(fileContent);

      console.log('‚úÖ Product sync completed successfully!');
      console.log(`   Synced ${mergedProducts.length} products`);
      
      if (!this.dryRun) {
        console.log(`   Updated: ${PRODUCTS_FILE_PATH}`);
      }

    } catch (error) {
      console.error('‚ùå Sync failed:', error.message);
      process.exit(1);
    }
  }
}

// CLI handling
const args = process.argv.slice(2);
const options = {
  dryRun: args.includes('--dry-run') || args.includes('-d'),
  verbose: args.includes('--verbose') || args.includes('-v'),
  preserveLocal: !args.includes('--no-preserve')
};

if (args.includes('--help') || args.includes('-h')) {
  console.log(`
Stripe Products Sync Tool

Usage: node scripts/sync-products.js [options]

Options:
  --dry-run, -d       Show what would be changed without making changes
  --verbose, -v       Show detailed output
  --no-preserve       Don't preserve local images and descriptions
  --help, -h          Show this help message

Environment:
  STRIPE_SECRET_KEY   Your Stripe secret key (required)

Examples:
  node scripts/sync-products.js --dry-run    # Preview changes
  node scripts/sync-products.js --verbose    # Sync with detailed output
  npm run sync-products                      # Sync products
`);
  process.exit(0);
}

const syncer = new ProductSyncer(options);
syncer.sync();